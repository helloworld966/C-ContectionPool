#pragma once
#include<string>
#include<queue>
using namespace std;
#include"Connection.h"
#include<memory>
#include<mutex>
#include<thread>
#include<functional>
#include<atomic>
#include<iostream>
#include<condition_variable>
/*
实现连接池功能模块
*/
class ConnectionPool
{
public:
	//获取连接池对象实例
	static ConnectionPool* getConnectionPool();
	//给外部提供接口，从连接池中获取一个可用的空闲连接
	shared_ptr<Connection> getConnection();
private:
	ConnectionPool();

	bool loadConfigFile();
	//运行在独立的线程中，专门负责生产新连接
	void produceConnectionTask();
	//扫描超过_maxIdleTime时间的空闲连接，进行对于的连接回收
	void scannerConnectionTask();


	string _ip;//ip地址
	unsigned short _port;//端口号
	string _username;//用户名
	string _password;//密码
	string _dbname;
	int _initSize;//初始连接量
	int _maxSize;//最大连接量
	int _maxIdleTime;//最大空闲时间
	int _connectionTimeout;//获取连接的超时时间


	queue<Connection*> _connectionQue;//存储队列
	mutex _queueMutex;//维护连接队列的线程安全互斥锁
	atomic_int _connectionCnt;//记录连接的总数量
	condition_variable cv;
};